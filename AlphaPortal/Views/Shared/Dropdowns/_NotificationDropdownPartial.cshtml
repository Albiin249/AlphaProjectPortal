@using System.Security.Claims
@using Business.Services
@{
    var userId = User.FindFirstValue(ClaimTypes.NameIdentifier) ?? "anonymous";
    var notifications = await notificationService.GetNotificationsAsync(userId);
    notifications = notifications.OrderByDescending(x => x.Created);
}

<div id="notification-container">
    <button id="notification-dropdown-button" type="button" data-type="dropdown" data-target="#notification-dropdown" class="btn-notification">
        <i class="fa-duotone fa-solid fa-bell" style="--fa-primary-opacity: 0.4; --fa-secondary-opacity: 1;"></i>
        @if (notifications.Any()) {
            <i class="dot dot-red fa-solid fa-circle"></i>
        }
    </button>
    <div id="notification-dropdown" class="dropdown">
        <div class="dropdown-header">
            <h3>Notifications</h3>
            <span class="badge badge-red notification-number">@notifications.Count()</span>
        </div>
        <div class="or-divider"></div>
        <div class="notifications">

            @foreach (var notification in notifications) {
                <div class="notification" data-notification-type="user" data-id="@notification.Id">
                    <div class="user-img">
                        <img src="@notification.Icon" alt="avtar">
                    </div>
                    <span class="message">@notification.Message</span>
                    <span class="time" data-created="@notification.Created.ToString("s")">@notification.Created</span>
                    <button class="btn-close" onclick="dismissNotification('@notification.Id')"></button>
                </div>
            }

        </div>
    </div>
</div>

<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/notificationHub", {
            withCredentials: true
        })
        .build()

    connection.on("ReceiveNotification", function(notification) {
        const notifications = document.querySelector('.notifications')

        const item = document.createElement('div')
        item.className = 'notification'
        item.setAttribute('data-id', notification.Id)
        item.innerHTML = `
            <div class="user-img">
                <img src="${notification.icon}" alt="avtar">
            </div>
            <span class="message">${notification.message}</span>
            <span class="time" data-created="${new Date(notification.created).toISOString()}">${notification.created}</span>
            <button class="btn-close" onclick="dismissNotification('${notification.Id}')"></button>
        `
        notifications.insertBefore(item, notifications.firstChild)
        updateRelativeTimes()
        updateNotificationCount()
    })

    connection.on("NotificationDismissed", function(notificationId) {
         removeNotification(notificationId)
    })


    connection.on("AdminReceiveNotification", function(notification) {
        const notifications = document.querySelector('.notifications')

        const item = document.createElement('div')
        item.className = 'notification'
        item.setAttribute('data-id', notification.Id)
        item.innerHTML = `
            <div class="user-img">
                <img src="${notification.icon}" alt="avtar">
            </div>
            <span class="message">${notification.message}</span>
            <span class="time" data-created="${new Date(notification.created).toISOString()}">${notification.created}</span>
            <button class="btn-close" onclick="dismissNotification('${notification.Id}')"></button>
        `
        notifications.insertBefore(item, notifications.firstChild)
        updateRelativeTimes()
        updateNotificationCount()
    })




    connection.start().catch(error => console.error(error))

    async function dismissNotification(notificationId) {
        try {
            const res = await fetch(`/api/notifications/dismiss/${notificationId}`, { method : 'POST' })
            if (res.ok) {
                removeNotification(notificationId)

            }
            else {
                console.error('Error removing notification')
            }
        }
        catch (error) {
            console.error('Error removing notification: ', error)
        }
    }


    function removeNotification(notificationId) {
        const element = document.querySelector(`.notification[data-id="${notificationId}"]`)
            if (element) {
              element.remove()
              updateNotificationCount()
            }
    }

    function updateNotificationCount() {
        const notifications = document.querySelector('.notifications')
        const notificationNumber = document.querySelector('.notification-number') 
        const notificationDropDownButton = document.querySelector('#notification-dropdown-button')
        const count = notifications.querySelectorAll('.notification').length

        if (notificationNumber) {
            notificationNumber.textContent = count
        }

        let dot = notificationDropDownButton.querySelector('.dot.dot-red')
        if (count > 0 && !dot) {
            dot = document.createElement('div')
            dot.className = 'dot dot-red'
            notificationDropDownButton.appendChild(dot)
        }

        if (count === 0 && dot) {
            dot.remove()
        }
    }

</script>